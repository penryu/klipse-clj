["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$parinfer.reader","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$whitespace?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","~:line",12,"~:column",7,"~:end-line",12,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^E",[["~$ch"]]]]]],"^5","~$parinfer.reader/whitespace?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",18,"~:method-params",["^E",[["^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",12,"~:ret-tag",["^4",["~$clj","~$cljs.core/IVector","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^B",12,"~:max-fixed-arity",1,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G"]]]]]],"~$in-code?",["^ ","^=",null,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",40,"^A",7,"^B",40,"^C",15,"^D",["^E",["^F",["^E",[["~$stack"]]]]],"~:doc","Next character is inside actual code."],"^5","~$parinfer.reader/in-code?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",15,"^I",["^E",[["^V"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",40,"^M","~$boolean","^B",40,"^S",1,"^T",true,"^D",["^E",["^F",["^E",[["^V"]]]]],"^W","Next character is inside actual code."],"~$valid-closer?",["^ ","^=",null,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",46,"^A",7,"^B",46,"^C",20,"^D",["^E",["^F",["^E",[["^V","^G"]]]]],"^W","Determine if the given closing delimiter can be used next, assuming we are inside code."],"^5","~$parinfer.reader/valid-closer?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",20,"^I",["^E",[["^V","^G"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",46,"^M","^Y","^B",46,"^S",2,"^T",true,"^D",["^E",["^F",["^E",[["^V","^G"]]]]],"^W","Determine if the given closing delimiter can be used next, assuming we are inside code."],"~$prev-ch",["^ ","^=",null,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",21,"^A",7,"^B",21,"^C",14,"^D",["^E",["^F",["^E",[["^V"]]]]]],"^5","~$parinfer.reader/prev-ch","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",14,"^I",["^E",[["^V"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",21,"^M","^P","^B",21,"^S",1,"^T",true,"^D",["^E",["^F",["^E",[["^V"]]]]]],"~$in-comment?",["^ ","^=",null,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",35,"^A",7,"^B",35,"^C",18,"^D",["^E",["^F",["^E",[["^V"]]]]],"^W","Next character is inside a comment."],"^5","~$parinfer.reader/in-comment?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",18,"^I",["^E",[["^V"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",35,"^M","^Y","^B",35,"^S",1,"^T",true,"^D",["^E",["^F",["^E",[["^V"]]]]],"^W","Next character is inside a comment."],"~$opening-delim?",["^ ","^5","~$parinfer.reader/opening-delim?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^@",9,"^A",1,"^B",9,"^C",20,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",9,"^A",6,"^B",9,"^C",20],"~:tag","~$cljs.core/ISet"],"~$closing-delim?",["^ ","^5","~$parinfer.reader/closing-delim?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^@",10,"^A",1,"^B",10,"^C",20,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",10,"^A",6,"^B",10,"^C",20],"^16","^17"],"~$in-str?",["^ ","^=",null,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",29,"^A",7,"^B",29,"^C",14,"^D",["^E",["^F",["^E",[["^V"]]]]],"^W","Next character is inside a string."],"^5","~$parinfer.reader/in-str?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",14,"^I",["^E",[["^V"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",29,"^M","^Y","^B",29,"^S",1,"^T",true,"^D",["^E",["^F",["^E",[["^V"]]]]],"^W","Next character is inside a string."],"~$matching-delim",["^ ","^5","~$parinfer.reader/matching-delim","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^@",4,"^A",1,"^B",4,"^C",20,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",4,"^A",6,"^B",4,"^C",20],"^16","~$cljs.core/IMap"],"~$push-char",["^ ","^=",null,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",126,"^A",7,"^B",126,"^C",16,"^D",["^E",["^F",["^E",[["~$state"]]]]]],"^5","~$parinfer.reader/push-char","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",16,"^I",["^E",[["^1@"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",126,"^M",["^4",[null,"^P","^R"]],"^B",126,"^S",1,"^T",true,"^D",["^E",["^F",["^E",[["^1@"]]]]]],"~$escaping?",["^ ","^=",null,"^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",24,"^A",7,"^B",24,"^C",16,"^D",["^E",["^F",["^E",[["^V"]]]]],"^W","Next character will be escaped."],"^5","~$parinfer.reader/escaping?","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",16,"^I",["^E",[["^V"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",24,"^M","^Y","^B",24,"^S",1,"^T",true,"^D",["^E",["^F",["^E",[["^V"]]]]],"^W","Next character will be escaped."],"~$push-char*",["^ ","^>",["^ ","^?","/Users/viebel/prj/klipse-clj/target/public/cljs-out/dev/parinfer/reader.cljc","^@",59,"^A",11,"^B",59,"^C",21,"^W","Update the delimiter stack with the given character."],"^5","~$parinfer.reader/push-char*","^?","target/public/cljs-out/dev/parinfer/reader.cljc","^C",21,"^A",1,"^@",59,"^B",59,"^16","~$cljs.core/MultiFn","^W","Update the delimiter stack with the given character."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:open","~:backup","~:else","~:default","~:x-pos","~:close","~:ch","~:stack","~:indent-delta","~:hierarchy"]],"~:order",["^1Q","^1T","^1K","^1P","^1M","^1N","^1R","^1O","^1S","^1L"]],"^W","a basic lisp reader for tracking parens and token states"]