["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$join","~$clojure.string"],"~:excludes",["~#set",[]],"~:name","~$parinfer.indent-mode","~:imports",null,"~:requires",["^ ","^4","^4","~$parinfer.string","^;","~$parinfer.reader","^<"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$whitespace?","^<","~$insert-string","^;","^3","^4","~$in-code?","^<","~$valid-closer?","^<","~$in-comment?","^<","~$remove-str-range","^;","~$closing-delim?","^<","~$in-str?","^<","~$matching-delim","^<","~$push-char","^<","~$get-lines","^;","~$escaping?","^<"],"~:defs",["^ ","~$initial-state",["^ ","~:meta",["^ ","~:file","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","~:line",19,"~:column",6,"~:end-line",19,"~:end-column",19],"^7","~$parinfer.indent-mode/initial-state","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",19,"^P",1,"^O",19,"^Q",19,"~:tag","~$cljs.core/IMap","~:doc","An initial state of our running state."],"~$process-text-change",["^ ","~:protocol-inline",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",404,"^P",7,"^Q",404,"^R",26,"~:arglists",["~#list",["~$quote",["^Z",[["~$prev-state","~$change"],["^10",["^ ","~:keys",["~$line-no","~$new-line"],"~:as","^11"],"~$options"]]]]],"^V","Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^10","^11"],["^10",["^ ","^12",["^13","^14"],"^15","^11"],"^16"]],"^Y",["^Z",[["^10","^11"],["^10",["^ ","^12",["^13","^14"],"^15","^11"],"^16"]]],"~:arglists-meta",["^Z",[null,null]]]],"^7","~$parinfer.indent-mode/process-text-change","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",26,"^17",["^ ","^18",false,"^19",3,"^1:",3,"^1;",[["^10","^11"],["^10",["^ ","^12",["^13","^14"],"^15","^11"],"^16"]],"^Y",["^Z",[["^10","^11"],["^10",["^ ","^12",["^13","^14"],"^15","^11"],"^16"]]],"^1<",["^Z",[null,null]]],"^1;",[["^10","^11"],["^10",["^ ","^12",["^13","^14"],"^15","^11"],"^16"]],"~:protocol-impl",null,"^19",3,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"~:methods",[["^ ","^19",2,"^18",false,"^T","~$any"],["^ ","^19",3,"^18",false,"^T",["^6",["~$clj","^1@"]]]],"^O",404,"^Q",404,"^1:",3,"~:fn-var",true,"^Y",["^Z",[["^10","^11"],["^10",["^ ","^12",["^13","^14"],"^15","^11"],"^16"]]],"^V","Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage."],"~$block-delim-trail",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",122,"^P",7,"^Q",122,"^R",24,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["~$delim-trail","^13","~$cursor-line","~$cursor-x","~$cursor-in-comment?"],"^15","~$state"]]]]]],"^V","The presence of the cursor can block the removal of some part of the delim trail."],"^7","~$parinfer.indent-mode/block-delim-trail","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",24,"^1;",["^Z",[["~$p__28244"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",122,"~:ret-tag",["^6",["^1A","^1@"]],"^Q",122,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1D","^13","^1E","^1F","^1G"],"^15","^1H"]]]]]],"^V","The presence of the cursor can block the removal of some part of the delim trail."],"~$process-text",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",327,"^P",7,"^Q",327,"^R",19,"^Y",["^Z",["^[",["^Z",[["~$text"],["^1M","^16"]]]]],"^V","Fully processes the given text.  Returns new state.\n  See `format-text` for usage.","^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^1M"],["^1M","^16"]],"^Y",["^Z",[["^1M"],["^1M","^16"]]],"^1<",["^Z",[null,null]]]],"^7","~$parinfer.indent-mode/process-text","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",19,"^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^1M"],["^1M","^16"]],"^Y",["^Z",[["^1M"],["^1M","^16"]]],"^1<",["^Z",[null,null]]],"^1;",[["^1M"],["^1M","^16"]],"^1>",null,"^19",2,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^1?",[["^ ","^19",1,"^18",false,"^T","^1@"],["^ ","^19",2,"^18",false,"^T",["^6",["^1A","^1@"]]]],"^O",327,"^Q",327,"^1:",2,"^1B",true,"^Y",["^Z",[["^1M"],["^1M","^16"]]],"^V","Fully processes the given text.  Returns new state.\n  See `format-text` for usage."],"~$format-text-change",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",451,"^P",7,"^Q",451,"^R",25,"^Y",["^Z",["^[",["^Z",[["^1M","^10","^11"],["^1M","^10","^11","^16"]]]]],"^V","Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ","^17",["^ ","^18",false,"^19",4,"^1:",4,"^1;",[["^1M","^10","^11"],["^1M","^10","^11","^16"]],"^Y",["^Z",[["^1M","^10","^11"],["^1M","^10","^11","^16"]]],"^1<",["^Z",[null,null]]]],"^7","~$parinfer.indent-mode/format-text-change","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",25,"^17",["^ ","^18",false,"^19",4,"^1:",4,"^1;",[["^1M","^10","^11"],["^1M","^10","^11","^16"]],"^Y",["^Z",[["^1M","^10","^11"],["^1M","^10","^11","^16"]]],"^1<",["^Z",[null,null]]],"^1;",[["^1M","^10","^11"],["^1M","^10","^11","^16"]],"^1>",null,"^19",4,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^1?",[["^ ","^19",3,"^18",false,"^T","^1@"],["^ ","^19",4,"^18",false,"^T","^U"]],"^O",451,"^Q",451,"^1:",4,"^1B",true,"^Y",["^Z",[["^1M","^10","^11"],["^1M","^10","^11","^16"]]],"^V","Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "],"~$process-indent",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",228,"^P",7,"^Q",228,"^R",21,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["~$stack","~$track-indent?","~$lines","^13","~$x-pos","~$ch"],"^15","^1H"]]]]]],"^V","Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "],"^7","~$parinfer.indent-mode/process-indent","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",21,"^1;",["^Z",[["~$p__28264"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",228,"^1K",["^6",["^1A","^1@"]],"^Q",228,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1R","^1S","^1T","^13","^1U","^1V"],"^15","^1H"]]]]]],"^V","Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "],"~$update-line",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",259,"^P",7,"^Q",259,"^R",18,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1V","^13"],"^15","^1H"]]]]]],"^V","Update the state by adding processed character to the line."],"^7","~$parinfer.indent-mode/update-line","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",18,"^1;",["^Z",[["~$p__28266"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",259,"^1K",["^6",["^1A","^1@"]],"^Q",259,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1V","^13"],"^15","^1H"]]]]]],"^V","Update the state by adding processed character to the line."],"~$initial-cached-state",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",392,"^P",7,"^Q",392,"^R",27,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1T","~$postline-states","~$postindent-states"],"^15","^10"],"^16","~$i"]]]]],"^V","build an initial state based on our starting line and previous cache."],"^7","~$parinfer.indent-mode/initial-cached-state","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",27,"^1;",["^Z",[["~$p__28294","^16","~$i"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",392,"^1K",["^6",[null,"^1A","^1@","~$clj-nil"]],"^Q",392,"^1:",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1T","^21","^22"],"^15","^10"],"^16","~$i"]]]]],"^V","build an initial state based on our starting line and previous cache."],"~$close-delims",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",33,"^P",7,"^Q",33,"^R",19,"^Y",["^Z",["^[",["^Z",[["^1H"],["^1H","~$indent-x"]]]]],"^V","Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  ","^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^1H"],["^1H","^27"]],"^Y",["^Z",[["^1H"],["^1H","^27"]]],"^1<",["^Z",[null,null]]]],"^7","~$parinfer.indent-mode/close-delims","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",19,"^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^1H"],["^1H","^27"]],"^Y",["^Z",[["^1H"],["^1H","^27"]]],"^1<",["^Z",[null,null]]],"^1;",[["^1H"],["^1H","^27"]],"^1>",null,"^19",2,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^1?",[["^ ","^19",1,"^18",false,"^T","^1@"],["^ ","^19",2,"^18",false,"^T",["^6",["^1A","^1@"]]]],"^O",33,"^Q",33,"^1:",2,"^1B",true,"^Y",["^Z",[["^1H"],["^1H","^27"]]],"^V","Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  "],"~$get-cached-state",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",218,"^P",7,"^Q",218,"^R",23,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]]],"^7","~$parinfer.indent-mode/get-cached-state","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",23,"^1;",["^Z",[["^1H"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",218,"^1K","^1A","^Q",218,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]]],"~$update-insertion-pt",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",178,"^P",7,"^Q",178,"^R",26,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1S","^1E","^1T","^13","^1R","^1U","^1V"],"^15","^1H"]]]]]],"^V","Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "],"^7","~$parinfer.indent-mode/update-insertion-pt","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",26,"^1;",["^Z",[["~$p__28261"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",178,"^1K",["^6",[null,"^1A","^1@","^25"]],"^Q",178,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1S","^1E","^1T","^13","^1R","^1U","^1V"],"^15","^1H"]]]]]],"^V","Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "],"~$remove-delim-trail",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",136,"^P",7,"^Q",136,"^R",25,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1D","~$insert","^13","^1T","~$backup","^1R"],"^15","^1H"]]]]]],"^V","Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "],"^7","~$parinfer.indent-mode/remove-delim-trail","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",25,"^1;",["^Z",[["~$p__28252"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",136,"^1K",["^6",[null,"^1A","^1@","^25"]],"^Q",136,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1D","^2?","^13","^1T","^2@","^1R"],"^15","^1H"]]]]]],"^V","Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "],"~$fill-rest-with-cache",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",357,"^P",7,"^Q",357,"^R",27,"^Y",["^Z",["^[",["^Z",[["^10","^1H","~$last-i"]]]]],"^V","fill the rest of the lines with info from cache."],"^7","~$parinfer.indent-mode/fill-rest-with-cache","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",27,"^1;",["^Z",[["^10","^1H","^2D"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",357,"^1K",["^6",[null,"^1A","^1@","^25"]],"^Q",357,"^1:",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^1H","^2D"]]]]],"^V","fill the rest of the lines with info from cache."],"~$process-char*",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",273,"^P",7,"^Q",273,"^R",20,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]]],"^7","~$parinfer.indent-mode/process-char*","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",20,"^1;",["^Z",[["^1H"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",273,"^1K",["^6",["^1A","^1@"]],"^Q",273,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]]],"~$update-delim-trail",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",66,"^P",7,"^Q",66,"^R",25,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1R","^1D","^2@","^1U","^1V","^1E","^13","^1F","^1G"],"^15","^1H"]]]]]],"^V","Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "],"^7","~$parinfer.indent-mode/update-delim-trail","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",25,"^1;",["^Z",[["~$p__28241"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",66,"^1K",["^6",["^1A","^1@"]],"^Q",66,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1R","^1D","^2@","^1U","^1V","^1E","^13","^1F","^1G"],"^15","^1H"]]]]]],"^V","Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "],"~$process-unchanged-lines",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",383,"^P",7,"^Q",383,"^R",30,"^Y",["^Z",["^[",["^Z",[["^10","^1H","~$start-i"]]]]],"^V","process the lines after those that have changed."],"^7","~$parinfer.indent-mode/process-unchanged-lines","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",30,"^1;",["^Z",[["^10","^1H","^2L"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",383,"^1K",["^6",[null,"^1@"]],"^Q",383,"^1:",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^1H","^2L"]]]]],"^V","process the lines after those that have changed."],"~$commit-cached-state",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",222,"^P",7,"^Q",222,"^R",26,"^Y",["^Z",["^[",["^Z",[["^1H","~$key-"]]]]],"^V","Cache a subset of the state after some event.\n  This is used by process-text-change."],"^7","~$parinfer.indent-mode/commit-cached-state","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",26,"^1;",["^Z",[["^1H","^2O"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",222,"^1K",["^6",["^1A","^1@"]],"^Q",222,"^1:",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^1H","^2O"]]]]],"^V","Cache a subset of the state after some event.\n  This is used by process-text-change."],"~$save-preinsert-line",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",264,"^P",7,"^Q",264,"^R",26,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^13","^2?","^1T"],"^15","^1H"]]]]]],"^V","Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."],"^7","~$parinfer.indent-mode/save-preinsert-line","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",26,"^1;",["^Z",[["~$p__28268"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",264,"^1K",["^6",[null,"^1A","^1@","^25"]],"^Q",264,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^13","^2?","^1T"],"^15","^1H"]]]]]],"^V","Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."],"~$process-line",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",291,"^P",7,"^Q",291,"^R",19,"^Y",["^Z",["^[",["^Z",[["~$line"],[["^ ","^12",["^1R","^1T","^13","^1E"],"^15","^1H"],"^2U"]]]]],"^V","Update the state by processing the given line of text.","^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^2U"],[["^ ","^12",["^1R","^1T","^13","^1E"],"^15","^1H"],"^2U"]],"^Y",["^Z",[["^2U"],[["^ ","^12",["^1R","^1T","^13","^1E"],"^15","^1H"],"^2U"]]],"^1<",["^Z",[null,null]]]],"^7","~$parinfer.indent-mode/process-line","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",19,"^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^2U"],[["^ ","^12",["^1R","^1T","^13","^1E"],"^15","^1H"],"^2U"]],"^Y",["^Z",[["^2U"],[["^ ","^12",["^1R","^1T","^13","^1E"],"^15","^1H"],"^2U"]]],"^1<",["^Z",[null,null]]],"^1;",[["^2U"],[["^ ","^12",["^1R","^1T","^13","^1E"],"^15","^1H"],"^2U"]],"^1>",null,"^19",2,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^1?",[["^ ","^19",1,"^18",false,"^T","^1@"],["^ ","^19",2,"^18",false,"^T",["^6",["^1A","^1@"]]]],"^O",291,"^Q",291,"^1:",2,"^1B",true,"^Y",["^Z",[["^2U"],[["^ ","^12",["^1R","^1T","^13","^1E"],"^15","^1H"],"^2U"]]],"^V","Update the state by processing the given line of text."],"~$finalize-state",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",320,"^P",7,"^Q",320,"^R",21,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1R"],"^15","^1H"]]]]]]],"^7","~$parinfer.indent-mode/finalize-state","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",21,"^1;",["^Z",[["~$p__28281"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",320,"^1K",["^6",["^1A","^1@"]],"^Q",320,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1R"],"^15","^1H"]]]]]]],"~$restore-insert-line",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",348,"^P",7,"^Q",348,"^R",26,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^2?","^13"],"^15","^1H"]]]]]],"^V","restore the text of a line before trailing delimiters were inserted"],"^7","~$parinfer.indent-mode/restore-insert-line","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",26,"^1;",["^Z",[["~$p__28287"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",348,"^1K",["^6",[null,"^1A","^1@","^25"]],"^Q",348,"^1:",1,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^2?","^13"],"^15","^1H"]]]]]],"^V","restore the text of a line before trailing delimiters were inserted"],"~$process-char",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",282,"^P",7,"^Q",282,"^R",19,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1T","^13"],"^15","^1H"],"^1V"]]]]],"^V","Update the state by processing the given character and its position."],"^7","~$parinfer.indent-mode/process-char","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",19,"^1;",["^Z",[["~$p__28271","^1V"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",282,"^1K",["^6",["^1A","^1@"]],"^Q",282,"^1:",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^12",["^1T","^13"],"^15","^1H"],"^1V"]]]]],"^V","Update the state by processing the given character and its position."],"~$safe-subvec",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",342,"^P",7,"^Q",342,"^R",18,"^Y",["^Z",["^[",["^Z",[["~$v","~$i"]]]]]],"^7","~$parinfer.indent-mode/safe-subvec","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",18,"^1;",["^Z",[["~$v","~$i"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",342,"^1K",["^6",["~$cljs.core/IVector","^1@"]],"^Q",342,"^1:",2,"^1B",true,"^Y",["^Z",["^[",["^Z",[["~$v","~$i"]]]]]],"~$process-unchanged-line*",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",371,"^P",7,"^Q",371,"^R",30,"^Y",["^Z",["^[",["^Z",[["^10","^1H",["~$old-i","^2U","~$cache"]]]]]],"^V","process a line that comes after those that have changed.\n  'reduced' will halt further processing."],"^7","~$parinfer.indent-mode/process-unchanged-line*","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",30,"^1;",["^Z",[["^10","^1H","~$p__28290"]]],"^1>",null,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^O",371,"^1K",["^6",["^1A","~$cljs.core/Reduced","^1@"]],"^Q",371,"^1:",3,"^1B",true,"^Y",["^Z",["^[",["^Z",[["^10","^1H",["^38","^2U","^39"]]]]]],"^V","process a line that comes after those that have changed.\n  'reduced' will halt further processing."],"~$format-text",["^ ","^X",null,"^M",["^ ","^N","/Users/penryu/code/github/klipse-clj/target/public/cljs-out/dev/parinfer/indent_mode.cljc","^O",427,"^P",7,"^Q",427,"^R",18,"^Y",["^Z",["^[",["^Z",[["^1M"],["^1M","^16"]]]]],"^V","Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ","^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^1M"],["^1M","^16"]],"^Y",["^Z",[["^1M"],["^1M","^16"]]],"^1<",["^Z",[null,null]]]],"^7","~$parinfer.indent-mode/format-text","^N","target/public/cljs-out/dev/parinfer/indent_mode.cljc","^R",18,"^17",["^ ","^18",false,"^19",2,"^1:",2,"^1;",[["^1M"],["^1M","^16"]],"^Y",["^Z",[["^1M"],["^1M","^16"]]],"^1<",["^Z",[null,null]]],"^1;",[["^1M"],["^1M","^16"]],"^1>",null,"^19",2,"^1<",["^Z",[null,null]],"^P",1,"^18",false,"^1?",[["^ ","^19",1,"^18",false,"^T","^1@"],["^ ","^19",2,"^18",false,"^T","^U"]],"^O",427,"^Q",427,"^1:",2,"^1B",true,"^Y",["^Z",[["^1M"],["^1M","^16"]]],"^V","Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:postindent-states","~:cursor-line","~:backup","~:insert","~:valid?","~:else","~:process?","~:x-pos","~:cursor-x","~:start","~:lines","~:state","~:postline-states","~:ch","~:track-indent?","^O","~:line-no","~:stack","~:delim-trail","~:new-line","~:removed-delims","~:end","~:processed-indent?","~:line-dy","~:text","~:cursor-in-comment?"]],"~:order",["^3C","^3E","^3F","^3M","^3O","^3Q","^3R","^3S","^3T","^3Y","^3J","^3L","^3W","^3P","^3[","^3D","^3K","^3H","^3V","^3I","^3X","^O","^3G","^3U","^3Z","^3N"]],"^V","Corrects parens based on indentation.\n  See http://shaunlebron.github.io/parinfer/#indent-mode","~:as-aliases",["^ "]]