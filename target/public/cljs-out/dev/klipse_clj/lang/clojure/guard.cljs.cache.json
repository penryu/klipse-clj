["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$go-loop","~$cljs.core.async.macros","~$*source-map-data*","~$cljs.compiler","~$emit","^6"],"~:excludes",["~#set",[]],"~:name","~$klipse-clj.lang.clojure.guard","~:imports",null,"~:requires",["^ ","~$ana.impl","~$cljs.analyzer.impl","^?","^?","^6","^6","~$cljs.core.async","^@"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$timeout","^@","~$<!","^@","^5","^6","^7","^6"],"~:defs",["^ ","~$watchdog",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","~:line",45,"~:column",7,"~:end-line",45,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^O",[[]]]]]],"^:","~$klipse-clj.lang.clojure.guard/watchdog","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",15,"~:method-params",["^O",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"~:variadic?",false,"^J",45,"~:ret-tag","~$any","^L",45,"~:max-fixed-arity",0,"~:fn-var",true,"^N",["^O",["^P",["^O",[[]]]]]],"~$guard",["^ ","^G",null,"^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",50,"^K",3,"^L",50,"^M",8,"~:export",true,"^N",["^O",["^P",["^O",[["~$max-eval-duration"]]]]]],"^:","~$klipse-clj.lang.clojure.guard/guard","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",8,"^R",["^O",[["^10"]]],"^S",null,"^[",true,"^T",["^O",[null,null]],"^K",1,"^U",false,"^J",49,"^V",["^9",[null,"~$clj-nil"]],"^L",50,"^X",1,"^Y",true,"^N",["^O",["^P",["^O",[["^10"]]]]]],"~$tick",["^ ","^G",null,"^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",31,"^K",7,"^L",31,"^M",11,"^N",["^O",["^P",["^O",[[]]]]]],"^:","~$klipse-clj.lang.clojure.guard/tick","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",11,"^R",["^O",[[]]],"^S",null,"^T",["^O",[null,null]],"^K",1,"^U",false,"^J",31,"^L",31,"^X",0,"^Y",true,"^N",["^O",["^P",["^O",[[]]]]]],"~$runonce",["^ ","^G",null,"^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",24,"^K",7,"^L",24,"^M",14,"^N",["^O",["^P",["^O",[["~$f"]]]]]],"^:","~$klipse-clj.lang.clojure.guard/runonce","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",14,"^R",["^O",[["~$f"]]],"^S",null,"^T",["^O",[null,null]],"^K",1,"^U",false,"^J",24,"^V","~$function","^L",24,"^X",1,"^Y",true,"^N",["^O",["^P",["^O",[["~$f"]]]]]],"~$run-watchdog*",["^ ","^G",null,"^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",34,"^K",7,"^L",34,"^M",20,"^N",["^O",["^P",["^O",[[]]]]],"~:doc","reset the *watchdog-tick* to the current time once in a while"],"^:","~$klipse-clj.lang.clojure.guard/run-watchdog*","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",20,"^R",["^O",[[]]],"^S",null,"^T",["^O",[null,null]],"^K",1,"^U",false,"^J",34,"^V","^W","^L",34,"^X",0,"^Y",true,"^N",["^O",["^P",["^O",[[]]]]],"^19","reset the *watchdog-tick* to the current time once in a while"],"~$watchdog-period",["^ ","^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",22,"^K",3,"^L",22,"^M",18,"^19","The number of msec for the watchdog period.\n            This value has to be much lower than min-max-eval-duration."],"^:","~$klipse-clj.lang.clojure.guard/watchdog-period","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",18,"^K",1,"^J",20,"^L",22,"~:tag","~$number","^19","The number of msec for the watchdog period.\n            This value has to be much lower than min-max-eval-duration."],"~$min-max-eval-duration",["^ ","^:","~$klipse-clj.lang.clojure.guard/min-max-eval-duration","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",19,"^K",1,"^L",19,"^M",27,"^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",19,"^K",6,"^L",19,"^M",27],"^1=","^1>"],"~$run-watchdog-once",["^ ","^:","~$klipse-clj.lang.clojure.guard/run-watchdog-once","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",43,"^K",1,"^L",43,"^M",23,"^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",43,"^K",6,"^L",43,"^M",23],"^1=","^17"],"~$my-emits",["^ ","^G",null,"^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",57,"^K",7,"^L",57,"^M",15,"^N",["^O",["^P",["^O",[["^10","~$&","~$xs"]]]]],"^19","same as cljs.compiler/emits with insertion of a `guard()` call before if and recur (emitted as continue) statement.\n\n  Limitations:\n  1. It doesn't prevent infinite loop in imported code e.g. (reduce + (range)\n  ","~:top-fn",["^ ","^U",true,"~:fixed-arity",1,"^X",1,"^R",[["^O",["^10","^1D"]]],"^N",["^O",[["^10","~$&","^1D"]]],"^T",["^O",[null]]]],"^:","~$klipse-clj.lang.clojure.guard/my-emits","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",15,"^1E",["^ ","^U",true,"^1F",1,"^X",1,"^R",[["^O",["^10","^1D"]]],"^N",["^O",[["^10","~$&","^1D"]]],"^T",["^O",[null]]],"^R",[["^O",["^10","^1D"]]],"^S",null,"^1F",1,"^T",["^O",[null]],"^K",1,"^U",true,"~:methods",[["^ ","^1F",1,"^U",true,"^1=","^12"]],"^J",57,"^V","^W","^L",57,"^X",1,"^Y",true,"^N",["^O",[["^10","~$&","^1D"]]],"^19","same as cljs.compiler/emits with insertion of a `guard()` call before if and recur (emitted as continue) statement.\n\n  Limitations:\n  1. It doesn't prevent infinite loop in imported code e.g. (reduce + (range)\n  "],"~$*watchdog-tick*",["^ ","^H",["^ ","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^J",17,"^K",3,"^L",17,"^M",18,"^19","each time the watchdog has a chance to run, this var is set with the current time","~:dynamic",true],"^:","~$klipse-clj.lang.clojure.guard/*watchdog-tick*","^I","/Users/penryu/code/github/klipse-clj/src/klipse_clj/lang/clojure/guard.cljs","^M",18,"^K",1,"^1J",true,"^J",15,"^L",17,"^1=","^W","^19","each time the watchdog has a chance to run, this var is set with the current time"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^4","^4","^@","^@"],"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:else","~:recur","~:gen-col"]],"~:order",["^1Q","^1P","^1R"]],"^19","The basic idea is that the first time a klipse snippet's cljs is evaluated, we kick off a go-loop whose job is to wake up every 100ms and update *watchdog-tick* to say: this is the last time that i woke up!\n\n  And if (guard) gets run and notices that the watchdog hasn't been able to wake up within the last *max-eval-duration* milliseconds, it decides that we should kill the currently evaluating function, and does that by throwing an error.\n\n  and this doesn't kill go-loops created by users' snippet code, because those go-loops won't block the watchdog from running.\n  ","~:as-aliases",["^ "]]